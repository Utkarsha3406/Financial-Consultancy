from fastapi import APIRouter, Request, Depends, responses, status
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from database import get_db
from models import User
from hashing import Hasher
from sqlalchemy.exc import IntegrityError

router = APIRouter()
templates = Jinja2Templates(directory="templates")


@router.get("/register")
def registration(request: Request):
    return templates.TemplateResponse("user_register.html", {"request": request})


@router.post("/register")
async def registration(request: Request, db: Session = Depends(get_db)):
    form = await request.form()
    email = form.get("email")
    password = form.get("password")
    errors = []
    if not password or len(password) < 6:
        errors.append("Password should be greater than 6 chars")
    if not email:
        errors.append("Email can't be blank")
    user = User(email=email, password=Hasher.get_hash_password(password))
    if len(errors) > 0:
        return templates.TemplateResponse(
            "user_register.html", {"request": request, "errors": errors}
        )
    try:
        db.add(user)
        db.commit()
        db.refresh(user)
        return responses.RedirectResponse(
            "/?msg=successfully registered", status_code=status.HTTP_302_FOUND
        )
    except IntegrityError:
        errors.append("Duplicate email")
        return templates.TemplateResponse(
            "user_register.html", {"request": request, "errors": errors}
        )










        
from fastapi import FastAPI, File, Form, Request, UploadFile

from fastapi.templating import Jinja2Templates

app = FastAPI()
templates = Jinja2Templates(directory="templates")

# Define the routes
@app.get("/")
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/register")
async def register(request: Request):
    return templates.TemplateResponse("register.html", {"request": request})

@app.post("/register")
async def register(request: Request, username: str = Form(...), email: str = Form(...), password: str = Form(...), confirm_password: str = Form(...)):
    # Validate the registration form data
    if len(username) < 4:
        return templates.TemplateResponse("register.html", {"request": request, "error": "Username must be at least 4 characters long."})
    if len(password) < 6:
        return templates.TemplateResponse("register.html", {"request": request, "error": "Password must be at least 6 characters long."})
    if password != confirm_password:
        return templates.TemplateResponse("register.html", {"request": request, "error": "Passwords do not match."})
    
    # Add the new user to the database
    # (replace this with your own database logic)
    # ...
    
    # Redirect the user to the login page
    return templates.TemplateResponse("index.html", {"request": request, "success": "Registration successful. Please log in."})

@app.post("/login")
async def login(request: Request, username: str = Form(...), password: str = Form(...)):
    # Validate the login form data
    if username != "example_user" or password != "example_password":
        return templates.TemplateResponse("index.html", {"request": request, "error": "Invalid username or password."})
    
    # Redirect the user to the dashboard
    return templates.TemplateResponse("dashboard.html", {"request": request})




from fastapi import FastAPI, Form, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

app = FastAPI()
templates = Jinja2Templates(directory="templates")

# Define the routes
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/register", response_class=HTMLResponse)
async def register(request: Request):
    return templates.TemplateResponse("register.html", {"request": request})

@app.post("/register", response_class=HTMLResponse)
async def register(request: Request, username: str = Form(...), email: str = Form(...), password: str = Form(...), confirm_password: str = Form(...)):
    # Validate the registration form data
    if len(username) < 4:
        return templates.TemplateResponse("register.html", {"request": request, "error": "Username must be at least 4 characters long."})
    if len(password) < 6:
        return templates.TemplateResponse("register.html", {"request": request, "error": "Password must be at least 6 characters long."})
    if password != confirm_password:
        return templates.TemplateResponse("register.html", {"request": request, "error": "Passwords do not match."})
    
    # Add the new user to the database
    # (replace this with your own database logic)
    # ...
    
    # Redirect the user to the login page
    return templates.TemplateResponse("index.html", {"request": request, "success": "Registration successful. Please log in."})

@app.post("/login", response_class=HTMLResponse)
async def login(request: Request, username: str = Form(...), password: str = Form(...)):
    # Validate the login form data
    if username != "example_user" or password != "example_password":
        return templates.TemplateResponse("index.html", {"request": request, "error": "Invalid username or password."})
    
    # Redirect the user to the dashboard
    return templates.TemplateResponse("dashboard.html", {"request": request})
